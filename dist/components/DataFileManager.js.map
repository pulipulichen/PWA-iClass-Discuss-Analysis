{"version":3,"sources":["webpack:///./src/components/DataFileManager/DataFileManager.yaml","webpack:///./src/components/DataFileManager/DataFileManager.html?9489","webpack:///./src/components/DataFileManager/DataFileManager.html","webpack:///./src/components/DataFileManager/DataFileManager.js","webpack:///./src/components/DataFileManager/DataFileManager.js?fe28","webpack:///./src/components/DataFileManager/DataFileManager.vue","webpack:///./src/components/DataFileManager/DataFileManager.yaml?c202","webpack:///./src/components/DataFileManager/DataFileManagerMethods.js","webpack:///fs (ignored)","webpack:///crypto (ignored)","webpack:///stream (ignored)"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA,kCAAkC,MAAM,8BAA8B,UAAU,uBAAuB;AACvG;AACA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA,qBAAqB,iCAAiC;AACtD;AACA;AACA;;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AACA;AACA,gBAAgB;AAChB,W;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH,cAAc;AACd;AACA;AACA,GAAG;AACH;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,qBAAqB,sCAAsC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,uBAAuB,mBAAmB;AAC1C;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,0BAA0B,2BAA2B;;AAErD;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA,SAAS;;AAET;AACA;AACA,OAAO;AACP,KAAK;AACL;AACA;AACA;AACA,0HAA0H;AAC1H;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,KAAK;AACL;AACA;AACA,uBAAuB,oBAAoB;AAC3C;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA,KAAK;AACL;AACA;;AAEiE;AACjE,0EAAsB;;AAEP,kE;;;;;;;;;;;;ACnMf;AAAA;AAAA,wCAAkE,CAAgB,mJAAG,EAAC,C;;;;;;;;;;;;ACAtF;AAAA;AAAA;AAAA;AAAA;AAA+F;AAC7B;AACL;;;AAG7D;AAC6F;AAC7F,gBAAgB,2GAAU;AAC1B,EAAE,oFAAM;AACR,EAAE,2FAAM;AACR,EAAE,oGAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACyK;AACzK,WAAW,0LAAM,iBAAiB,kMAAM;;AAExC;AACA,IAAI,KAAU,EAAE,YAiBf;AACD;AACe,gF;;;;;;;;;;;;AC1Cf;AAAA;AAAA;AAAA;AAAqO,CAAgB,0SAAG,EAAC,C;;;;;;;;;;;;ACAzP;AAAA;AAAA;AAAuB;;AAER;;AAEf;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,mCAAmC,EAAE,WAAW,UAAU;AAC1D;AACA;AACA,OAAO;AACP,K;AACA;AACA;AACA;AACA,iCAAiC,EAAE,WAAW,UAAU;AACxD;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA,mBAAmB,kBAAkB;AACrC;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,cAAc,UAAU,IAAI,eAAe;AAC3C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,2CAAI,aAAa,cAAc;AACtD;AACA;AACA;AACA,KAAK;AACL,G;;AAEA;;AAEA;;AAEA;;AAEA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;;AAEA;AACA,mBAAmB,2CAAI,6CAA6C,uBAAuB;;AAE3F;;AAEA;AACA;;AAEA;AACA;AACA,C;;;;;;;;;;;AC7KA,e;;;;;;;;;;;ACAA,e;;;;;;;;;;;ACAA,e","file":"components/DataFileManager.js","sourcesContent":["module.exports = function (Component) {\n  Component.options.__i18n = Component.options.__i18n || []\n  Component.options.__i18n.push('{\"en\":{\"TEST_MESSAGE\":\"Test Message\"},\"zh-TW\":{\"TEST_MESSAGE\":\"測試訊息\"}}')\n  delete Component.options._Ctor\n}\n","var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"span\", { staticClass: \"DataTaskManager\" })\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","export * from \"-!../../../node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./DataFileManager.html?vue&type=template&id=2ce92d42&\"","let app = {\r\n  props: ['db'],\r\n  components: {},\r\n  data () {    \r\n    this.$i18n.locale = this.db.localConfig.locale\r\n    return {\r\n    }\r\n  },\r\n  watch: {\r\n    'db.localConfig.locale'() {\r\n      this.$i18n.locale = this.db.localConfig.locale;\r\n    },\r\n    'db.localConfig.analysisResult'() {\r\n      this.parseAnalysisResult()\r\n    },\r\n    'db.config.inited' (inited) {\r\n      // if (inited === true) {\r\n      this.initAnalyze()\r\n      // }\r\n    },\r\n  },\r\n  computed: {},\r\n  mounted() {\r\n    this.initUtils()\r\n  },\r\n  methods: {\r\n    \r\n    initAnalyze: async function () {\r\n      \r\n      await this.db.utils.AsyncUtils.sleep(1000)\r\n      // console.log('go')\r\n      await this.startAnalyze()\r\n      this.parseAnalysisResult()\r\n    },\r\n    startAnalyze: async function () {\r\n      \r\n      if (this.db.localConfig.files.length === 0) {\r\n        return false\r\n      }\r\n\r\n      this.db.config.isAnalyzing = true\r\n      this.db.config.resultRows = []\r\n\r\n      let output = []\r\n\r\n      for (let i = 0; i < this.db.localConfig.files.length; i++) {\r\n        let file = this.db.localConfig.files[i]\r\n        if (file.enable === false) {\r\n          continue\r\n        }\r\n        let content = file.content\r\n        // console.log(content)\r\n        let record = content['回覆紀錄']\r\n        if (!record) {\r\n          record = content.Replies\r\n        }\r\n\r\n        // console.log(record)\r\n\r\n        for (let j = 1; j < record.length; j++) {\r\n          let row = record[j]\r\n\r\n          // console.log(row)\r\n\r\n          let rowOutput = []\r\n          // row = this.filterRow(row)\r\n          let type = row[2]\r\n          let role = row[8]\r\n\r\n          let title = row[3]\r\n          let content = row[9]\r\n\r\n          // console.log({type, role, title, content})\r\n\r\n          // console.log(row)\r\n          if (this.db.localConfig.onlyPost && \r\n             !(type === 'Topic' || type === '文章') ) {\r\n            continue\r\n          }\r\n\r\n          if (this.db.localConfig.onlyStudent && \r\n              !(role == '學生' || role === 'Student')) {\r\n            continue\r\n          }\r\n\r\n          if (this.db.localConfig.targetFieldTitle) {\r\n            rowOutput.push(await this.filterText(title))\r\n          }\r\n\r\n          if (this.db.localConfig.targetFieldContent) {\r\n            rowOutput.push(await this.filterText(content))\r\n          }\r\n\r\n          output.push(rowOutput)\r\n        }\r\n      }\r\n\r\n      this.db.localConfig.analysisResult = output.map(row => row.join('\\t')).join('\\n')\r\n      \r\n      // console.log(this.db.localConfig.analysisResult)\r\n\r\n    },\r\n    parseAnalysisResult () {\r\n      let analysisResult = this.db.localConfig.analysisResult\r\n      analysisResult = analysisResult.trim()\r\n\r\n      if (analysisResult === '') {\r\n        this.db.config.resultRows = []\r\n        return false\r\n      }\r\n      // console.log(analysisResult)\r\n      clearTimeout(this.timer)\r\n\r\n      this.timer = setTimeout(() => {\r\n        analysisResult = analysisResult.replace(/\\n/g, ' ')\r\n        analysisResult = analysisResult.replace(/\\t/g, ' ')\r\n        let parts = analysisResult.split(' ')\r\n\r\n        let countMap = {}\r\n\r\n        parts.forEach((part) => {\r\n          if (part === '') {\r\n            return false\r\n          }\r\n\r\n          if (!countMap[part]) {\r\n            countMap[part] = 0\r\n          }\r\n          countMap[part]++\r\n        })\r\n\r\n        let resultRows = Object.keys(countMap).map((key) => {\r\n          return {\r\n            term: key,\r\n            count: countMap[key]\r\n          }\r\n        })\r\n\r\n        resultRows.sort((a, b) => {\r\n          return (b.count - a.count)\r\n        })\r\n\r\n        this.db.config.resultRows = resultRows\r\n        this.db.config.isAnalyzing = false\r\n      }, 300)\r\n    },\r\n    filterText: async function (text) {\r\n      text = text.trim().split(' ')\r\n      if (this.db.localConfig.filterColon) {\r\n        text = this.splitTermsProcess(text, [',', ':', ':', '：', '、', '；', '，', '。', '（', '(', ')', '）', '.', '「', '」', ';', ' ', '?', '？', '《', '》', '=', '-'])\r\n      }\r\n\r\n      if (this.db.localConfig.filterSlash) {\r\n        text = this.splitTermsProcess(text, ['|', '/', '\\\\', '／', '-'])\r\n      }\r\n\r\n      if (this.db.localConfig.filterSegment) {\r\n        text = await this.db.utils.TokenizeUtils.tokenize(text)\r\n        // console.error('@TODO')\r\n      }\r\n\r\n      text = this.splitTermsProcess(text, ' ')\r\n      // text = text.trim()\r\n\r\n      return text.join(' ')\r\n    },\r\n    splitTermsProcess (terms, splitor) {\r\n      if (Array.isArray(splitor)) {\r\n        for (let i = 0; i < splitor.length; i++) {\r\n          terms = this.splitTermsProcess(terms, splitor[i])\r\n        }\r\n        return terms\r\n      }\r\n\r\n      let tmp = []\r\n\r\n      terms.forEach(term => {\r\n        term.split(splitor).forEach(term => {\r\n          term = term.trim()\r\n          term = term.toLowerCase()\r\n\r\n          if (term !== '') {\r\n            tmp.push(term)\r\n          }\r\n        })\r\n      })\r\n\r\n      return tmp\r\n    },\r\n  }\r\n}\r\n\r\nimport DataFileManagerMethods from './DataFileManagerMethods.js';\r\nDataFileManagerMethods(app)\r\n\r\nexport default app","import mod from \"-!./DataFileManager.js?vue&type=script&lang=js&\"; export default mod; export * from \"-!./DataFileManager.js?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./DataFileManager.html?vue&type=template&id=2ce92d42&\"\nimport script from \"./DataFileManager.js?vue&type=script&lang=js&\"\nexport * from \"./DataFileManager.js?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* custom blocks */\nimport block0 from \"./DataFileManager.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fapp%2Fsrc%2Fcomponents%2FDataFileManager%2FDataFileManager.vue&lang=yaml\"\nif (typeof block0 === 'function') block0(component)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/app/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('2ce92d42')) {\n      api.createRecord('2ce92d42', component.options)\n    } else {\n      api.reload('2ce92d42', component.options)\n    }\n    module.hot.accept(\"./DataFileManager.html?vue&type=template&id=2ce92d42&\", function () {\n      api.rerender('2ce92d42', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/components/DataFileManager/DataFileManager.vue\"\nexport default component.exports","import mod from \"-!../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./DataFileManager.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fapp%2Fsrc%2Fcomponents%2FDataFileManager%2FDataFileManager.vue&lang=yaml\"; export default mod; export * from \"-!../../../node_modules/@kazupon/vue-i18n-loader/lib/index.js!./DataFileManager.yaml?vue&type=custom&index=0&blockType=i18n&issuerPath=%2Fapp%2Fsrc%2Fcomponents%2FDataFileManager%2FDataFileManager.vue&lang=yaml\"","import XLSX from 'xlsx'\n\nexport default function (app) {\n\n  if (!app.methods) {\n    app.methods = {}\n  }\n\n  app.methods.initUtils = function () {\n    this.db.file = {\n      importFilesByEvent: (event) => {\n        this.importFilesByEvent(event)\n      },\n      getDataInstance: () => {\n        return this\n      },\n      startAnalyze: () => {\n        return this.startAnalyze()\n      }\n    }\n    // console.log(this.db.task)\n  }\n  \n  app.methods.importFilesByEvent = async function (event) {\n    if (!window.FileReader) {\n      console.error(this.$t('Browser is not compatible'))\n      return false // Browser is not compatible\n    }\n    // console.log('File(s) dropped');\n\n    // Prevent default behavior (Prevent file from being opened)\n    event.preventDefault();\n\n    let files = []\n    \n    if (event.dataTransfer && event.dataTransfer.items) {\n      \n      // Use DataTransferItemList interface to access the file(s)\n      [...event.dataTransfer.items].forEach((item, i) => {\n        // If dropped items aren't files, reject them\n        if (item.kind === 'file') {\n          const file = item.getAsFile();\n          // console.log(`… file[${i}].name = ${file.name}`);\n          files.push(file)\n        }\n      });\n    } \n    else if (event.dataTransfer && event.dataTransfer.files) {\n      // Use DataTransfer interface to access the file(s)\n      [...event.dataTransfer.files].forEach((file, i) => {\n        // console.log(`… file[${i}].name = ${file.name}`);\n        files.push(file)\n      });\n    }\n    else {\n      files = event.target.files\n    }\n\n    if (files.length > 0) {\n      for (let i = 0; i < files.length; i++) {\n        await this.importFile(files[i])\n      }\n    }\n\n    event.target.value = ''\n  }\n\n  app.methods.importFile = async function (file) {\n    let filename = file.name\n\n    let workbook = await this.loadFileSheet(file)\n    let data = await this.parsingWorkbookToArray(workbook)\n    \n    let forumInformation = this.getForumInformation(data)\n    if (forumInformation) {\n      filename = forumInformation\n    }\n\n    let fileItem = this.db.localConfig.files.filter(file => {\n      return (file.filename === filename)\n    })\n\n    // console.log(data)\n\n    if (fileItem.length > 0) {\n      fileItem = fileItem[0]\n    }\n    else {\n      this.db.localConfig.files.push({\n        filename,\n        enable: true,\n        content: data\n      })\n\n      if (this.db.localConfig.analysisResult === ``) {\n        this.startAnalyze()\n      }\n    }\n  }\n\n  app.methods.getForumInformation = function (data) {\n    let sheet = data['Topic information']\n    if (!sheet) {\n      sheet = data['討論資訊']\n    }\n\n    if (Array.isArray(sheet) === false) {\n      return false\n    }\n\n    let forumName\n    let forumStartTime\n\n    // console.log(sheet)\n\n    for (let i = 0; i < sheet.length; i++) {\n      let row = sheet[i]\n\n      let key = row[0]\n      let value = row[1]\n\n      if (key === 'Forum' || key === '討論區') {\n        forumName = value\n      }\n      else if (key === 'Available From' || key === '開放時間') {\n        // forumStartTime = value.\n        let spaceParts = value.split(' ')\n        let dotParts = spaceParts[0].split('.')\n        forumStartTime = dotParts[1] + '.' + dotParts[2]\n      }\n\n      if (forumName && forumStartTime) {\n        break\n      }\n    }\n\n    return `${forumName} (${forumStartTime})`\n  }\n\n  app.methods.loadFileSheet = async function (file) {\n    let reader = new FileReader();\n    return new Promise((resolve) => {\n      reader.readAsArrayBuffer(file);\n      reader.onload = async (e) => {\n        var data = new Uint8Array(reader.result);\n        var workbook = XLSX.read(data, {type: \"array\"})\n        // resolve(await this.processXLSXData(workbook))\n        resolve(workbook)\n      }\n    })\n  } \n\n  app.methods.parsingWorkbookToArray = async function (workbook) {\n    \n    var sheet_name_list = workbook.SheetNames;\n\n    let output = {}\n\n    for (let j = 0; j < sheet_name_list.length; j++) {\n      //console.log(url)\n      //console.log(sheet_name_list)\n      let name = sheet_name_list[j]\n\n      // https://github.com/SheetJS/sheetjs/issues/574#issuecomment-1017870956\n      var xlData = XLSX.utils.sheet_to_json(workbook.Sheets[name], { header:1, defval: \"\" });\n\n      xlData = await this.db.utils.DataUtils.parseNumber(xlData)\n\n      output[name] = xlData\n    }\n      \n    return output\n  }\n}","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"sourceRoot":""}